clear all
close all
%%%% Read in a test image with a door %%%%%

% First test image 
image = imread('./01 - R2441 - i.JPG');
[M N C] = size(image);
figure(1),imshow(image,'Border','tight');

% Second test image
%image = imread('./01 - R2442 - i.JPG');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Task 1: Image Preprocessing - Contrast Adjustment, Noise Reduction      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Your code goes here ...

%%%% Conversion to Gray Value Image %%%%
grey_img = rgb2gray(image);
figure(1),imshow(grey_img);

%%%% Adjust Contrast %%%%
adj_img = imadjust(grey_img);
figure(1),imshow(adj_img);

%%%% Noise reduction via binomial low-pass filtering %%%% 
h = 1/256*[1 4 6 4 1; 4 16 24 16 4; 6 24 36 24 6; 4 16 24 16 4; 1 4 6 4 1];
img= imfilter(adj_img,h);
figure(1),imshow(img,'Border','tight');

%%%% If you have no result load the given one %%%%

%load('Solutions_Task_1.mat')
%figure(1),imshow(img,'Border','tight');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Task 2: Feature Extraction - Contours                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Your code goes here ...

%%%% Optimized Sobel x %%%%
Sx = 1/32* [-3 0 3; -10 0 10; -3 0 3];
img=double(img);
img_sobel_x = conv2(img,Sx);
figure(2),imagesc(img_sobel_x); colorbar; colormap hsv; axis off;

%%%% Edge Strength %%%%
img_edge_strength_x = imgradient(img_sobel_x,'sobel');

figure(3),imagesc(log(1+img_edge_strength_x)); colorbar; axis off;

% Negative x-Gradients (bright to dark)  %

% Define edge strength threshold %
h=-3;                                  %h = threshold

% Segment strong negative x-Gradients %
neg_sobel_x=img_sobel_x<h;
img_neg_edge_x = neg_sobel_x;

figure(4),imagesc(img_neg_edge_x); colorbar; colormap gray; axis off;

% Noise reduction %
img_noise_reduced_neg_x = medfilt2(img_neg_edge_x);

% Dilate for 1 pixel %
nhood=[0 1 0; 1 1 1; 0 1 0];
img_pixel_widened_x = imdilate(img_noise_reduced_neg_x,nhood);

% Positive x-Gradients (dark to bright) %
pos_sobel_x=img_sobel_x>h;

% Segment strong positive x-Gradients %
img_pos_edge_x = pos_sobel_x;

figure(5),imagesc(img_pos_edge_x); colorbar; colormap gray; axis off;

% Noise reduction %
img_noise_reduced_pos_x = medfilt2(img_pos_edge_x);

% Dilate for 1 pixel %
nhood=[0 1 0; 1 1 1; 0 1 0];
img_pixel_widened_x = imdilate(img_noise_reduced_pos_x,nhood);

% Optimized Sobel y %

Sy = 1/32* [-3 -10 -3;0 0 0; 3 10 3];
img=double(img);
img_sobel_y = conv2(img,Sy);
figure(2),imagesc(img_sobel_y); colorbar; colormap hsv; axis off;

%%%% Edge Strength %%%%
img_edge_strength_y = imgradient(img_sobel_y,'sobel');

% Negative y-Gradients (bright to dark)  %

% Define edge strength threshold %
h=-3;                                  %h = threshold

% Segment strong negative y-Gradients %
neg_sobel_y=img_sobel_y<h;
img_neg_edge_y = neg_sobel_y;

figure(4),imagesc(img_neg_edge_y); colorbar; colormap gray; axis off;

% Noise reduction %
img_noise_reduced_neg_y = medfilt2(img_neg_edge_y);

% Dilate for 1 pixel %
nhood=[0 1 0; 1 1 1; 0 1 0];
img_pixel_widened_y = imdilate(img_noise_reduced_neg_y,nhood);
figure(6),imagesc(img_neg_edge_y); colorbar; colormap gray; axis off;

% Positive y-Gradients (dark to bright) %
pos_sobel_y=img_sobel_y>h;

% Segment strong positive y-Gradients %
img_pos_edge_y = pos_sobel_y;

figure(5),imagesc(img_pos_edge_y); colorbar; colormap gray; axis off;

% Noise reduction %
img_noise_reduced_pos_y = medfilt2(img_pos_edge_y);
figure(7),imagesc(img_pos_edge_y); colorbar; colormap gray; axis off;

% Dilate for 1 pixel %
nhood=[0 1 0; 1 1 1; 0 1 0];
img_pixel_widened_y = imdilate(img_noise_reduced_pos_y,nhood);

%%%% If you have no result load the given one %%%%

%load('Solutions_Task_2.mat')
